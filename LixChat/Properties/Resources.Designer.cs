//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LX29_LixChat.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LX29_LixChat.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Username aliases:
        ///	case insensitive, * means any user can trigger the Action.
        ///Keywords for Action:
        ///	&amp;rd[minimum,maximum] = generates a random Number.
        ///	&amp;rd[FileName] = takes a random Line from \&quot;Filename\&quot;.
        ///	...File must be in Script Folder.(can be found in Settings)
        ///	&amp;name = replace with caller name. (who has triggered the Action)
        ///	&amp;channel = replace with channel name.
        ///	&amp;word[index] = replace with word, at index, from calling Message. ähnelt.
        /// </summary>
        internal static string ActionHelp {
            get {
                return ResourceManager.GetString("ActionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ban {
            get {
                object obj = ResourceManager.GetObject("ban", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap BLACK {
            get {
                object obj = ResourceManager.GetObject("BLACK", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1f600=:grinning:
        ///1f603=:smiley:
        ///1f604=:smile:
        ///1f601=:grin:
        ///1f606=:laughing:
        ///1f605=:sweat_smile:
        ///1f602=:joy:
        ///1f923=:rofl:
        ///263a=:relaxed:
        ///1f60a=:blush:
        ///1f607=:innocent:
        ///1f642=:slight_smile:
        ///1f643=:upside_down:
        ///1f609=:wink:
        ///1f60c=:relieved:
        ///1f60d=:heart_eyes:
        ///1f618=:kissing_heart:
        ///1f617=:kissing:
        ///1f619=:kissing_smiling_eyes:
        ///1f61a=:kissing_closed_eyes:
        ///1f60b=:yum:
        ///1f61c=:stuck_out_tongue_winking_eye:
        ///1f61d=:stuck_out_tongue_closed_eyes:
        ///1f61b=:stuck_out_tongue:
        ///1f911=:money_mouth:
        ///1f91 [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string emojis {
            get {
                return ResourceManager.GetString("emojis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;!DOCTYPE html&gt;
        ///&lt;html&gt;
        ///&lt;head&gt;
        ///    &lt;title&gt;TCVC - Access token&lt;/title&gt;
        ///    &lt;meta name=&quot;ROBOTS&quot; content=&quot;NOFOLLOW&quot;&gt;
        ///    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        ///    &lt;script type=&quot;text/javascript&quot;&gt;
        ///&lt;!--
        ///function initiate() {
        ///	var hash = document.location.hash.substr(1);
        ///	var hashParts = hash.split(&quot;&amp;&quot;);
        ///	var access_token = null;
        ///	for (var i=0;i&lt;hashParts.length;++i) {
        ///		var parameterParts = hashParts[i].split(&quot;=&quot;);
        ///		var key = parameterParts[0];
        ///		var value = parameterP [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string index {
            get {
                return ResourceManager.GetString("index", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap loading {
            get {
                object obj = ResourceManager.GetObject("loading", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die using LX29_ChatClient;
        ///using System;
        ///using System.Windows.Forms;
        ///
        ///namespace UserScripts
        ///{
        ///    public class TestScripts
        ///    {
        ///        public static object Test(ChatMessage Message)
        ///        {
        ///            if (Message.IsType(MsgType.Outgoing))
        ///            {
        ///                if (Message.ChatWords[0].Text.Equals(&quot;!test&quot;, StringComparison.OrdinalIgnoreCase))
        ///                {
        ///                    //ChatClient.SendMessage(&quot;Bestanden!&quot;, Message.Channel);
        ///                    ChatClient.SendSilentMessage( [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string MyScripts {
            get {
                return ResourceManager.GetString("MyScripts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;!DOCTYPE html&gt;
        ///&lt;html&gt;
        ///&lt;head&gt;
        ///    &lt;title&gt;TCVC - Access token&lt;/title&gt;
        ///    &lt;meta name=&quot;ROBOTS&quot; content=&quot;NOFOLLOW&quot;&gt;
        ///    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        ///    &lt;script type=&quot;text/javascript&quot;&gt;
        ///&lt;!--
        ///    function initiate() {
        ///        // Change page so the history won&apos;t contain the token
        ///        document.location.replace(&quot;http://127.0.0.1:12685/success.html&quot;);
        ///    }
        ///--&gt;
        ///    &lt;/script&gt;
        ///    &lt;style type=&quot;text/css&quot;&gt;
        ///        body {
        ///            font-family: Consolas, sans-s [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string received {
            get {
                return ResourceManager.GetString("received", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap resize {
            get {
                object obj = ResourceManager.GetObject("resize", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;!DOCTYPE html&gt;
        ///&lt;html&gt;
        ///&lt;head&gt;
        ///    &lt;title&gt;TCVC - Access token&lt;/title&gt;
        ///    &lt;meta name=&quot;ROBOTS&quot; content=&quot;NOFOLLOW&quot;&gt;
        ///    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        ///    &lt;script type=&quot;text/javascript&quot;&gt;
        ///&lt;!--
        ///    function initiate() {
        ///        // Change page so the history won&apos;t contain the token
        ///        //document.location.replace(&quot;http://127.0.0.1:8080/success.html&quot;);
        ///    }
        ///--&gt;
        ///    &lt;/script&gt;
        ///    &lt;style type=&quot;text/css&quot;&gt;
        ///        body {
        ///            font-family: Consolas, sans- [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string success {
            get {
                return ResourceManager.GetString("success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap temp {
            get {
                object obj = ResourceManager.GetObject("temp", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap timeout {
            get {
                object obj = ResourceManager.GetObject("timeout", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
